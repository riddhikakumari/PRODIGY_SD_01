public class SudokuSolver {
    
    // Function to print the solved Sudoku grid
    public static void printGrid(int[][] grid) {
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                System.out.print(grid[row][col] + " ");
            }
            System.out.println();
        }
    }
    
    // Function to find an empty location in the grid
    public static boolean findEmptyLocation(int[][] grid, int[] location) {
        for (location[0] = 0; location[0] < 9; location[0]++) {
            for (location[1] = 0; location[1] < 9; location[1]++) {
                if (grid[location[0]][location[1]] == 0) {
                    return true; // Found an empty location
                }
            }
        }
        return false; // No empty location found
    }
    
    // Function to check if a number can be placed at the given position
    public static boolean isSafe(int[][] grid, int row, int col, int num) {
        return !usedInRow(grid, row, num) && !usedInCol(grid, col, num) && !usedInBox(grid, row - row % 3, col - col % 3, num);
    }
    
    // Helper function to check if the number is already used in the row
    public static boolean usedInRow(int[][] grid, int row, int num) {
        for (int col = 0; col < 9; col++) {
            if (grid[row][col] == num) {
                return true;
            }
        }
        return false;
    }
    
    // Helper function to check if the number is already used in the column
    public static boolean usedInCol(int[][] grid, int col, int num) {
        for (int row = 0; row < 9; row++) {
            if (grid[row][col] == num) {
                return true;
            }
        }
        return false;
    }
    
    // Helper function to check if the number is already used in the box
    public static boolean usedInBox(int[][] grid, int boxStartRow, int boxStartCol, int num) {
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (grid[row + boxStartRow][col + boxStartCol] == num) {
                    return true;
                }
            }
        }
        return false;
    }
    
    // Main function to solve the Sudoku puzzle
    public static boolean solveSudoku(int[][] grid) {
        int[] location = new int[2];
        if (!findEmptyLocation(grid, location)) {
            return true; // Puzzle solved
        }
        int row = location[0];
        int col = location[1];
        for (int num = 1; num <= 9; num++) {
            if (isSafe(grid, row, col, num)) {
                grid[row][col] = num; // Try placing the number
                if (solveSudoku(grid)) {
                    return true; // If solved, return true
                }
                grid[row][col] = 0; // Backtrack
            }
        }
        return false; // No solution found
    }
    
    public static void main(String[] args) {
        int[][] grid = {
            {5, 3, 0, 0, 7, 0, 0, 0, 0},
            {6, 0, 0, 1, 9, 5, 0, 0, 0},
            {0, 9, 8, 0, 0, 0, 0, 6, 0},
            {8, 0, 0, 0, 6, 0, 0, 0, 3},
            {4, 0, 0, 8, 0, 3, 0, 0, 1},
            {7, 0, 0, 0, 2, 0, 0, 0, 6},
            {0, 6, 0, 0, 0, 0, 2, 8, 0},
            {0, 0, 0, 4, 1, 9, 0, 0, 5},
            {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };

        if (solveSudoku(grid)) {
            System.out.println("Sudoku Solved Successfully:");
            printGrid(grid);
        } else {
            System.out.println("No solution exists");
        }
    }
}
